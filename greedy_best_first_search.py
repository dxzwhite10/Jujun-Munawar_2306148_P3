# -*- coding: utf-8 -*-
"""Greedy Best First Search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DNz06vgBwz3acfuSu635tHvBbCh5DaGh
"""

from queue import PriorityQueue

# Fungsi untuk merekonstruksi jalur dari start ke goal
def reconstruct_path(path, start, goal):
    current = goal
    route = [current]
    while current != start:
        current = path[current]
        route.append(current)
    route.reverse()
    return route

# Fungsi untuk algoritma Greedy Best-First Search
def greedy_search(graph, start, goal, heuristic):
    frontier = PriorityQueue()  # Antrian prioritas untuk menyimpan simpul yang akan dieksplorasi
    frontier.put((heuristic[start], start))  # Tambahkan simpul awal dengan prioritas heuristik
    explored = set()  # Set untuk menyimpan simpul yang sudah dieksplorasi
    path = {}  # Dictionary untuk menyimpan jalur

    while not frontier.empty():
        _, current_node = frontier.get()  # Mengambil simpul dengan nilai prioritas terendah

        if current_node == goal:
            print("Simpul tujuan sudah ditemukan!")
            route = reconstruct_path(path, start, goal)
            print("Jalur terpendek:", " -> ".join(route))
            return True   # Mengembalikan True jika simpul tujuan ditemukan

        explored.add(current_node)  # Menandai simpul sebagai telah dieksplorasi

        for neighbor in graph.get(current_node, {}):
            if neighbor not in explored and neighbor not in [node for _, node in frontier.queue]:
                frontier.put((heuristic[neighbor], neighbor))  # Tambahkan ke antrian prioritas
                path[neighbor] = current_node  # Simpan jalur yang diambil

    print("Simpul tujuan tidak ditemukan!")
    return False  # Jika tidak menemukan tujuan

# Daftar heuristik untuk setiap simpul
heuristic = {
    'S': 6,
    'A': 4,
    'B': 3,
    'C': 3,
    'D': 1,
    'G': 0
}

# Graf berbobot (dalam bentuk adjacency list)
graph = {
    'S': {'A', 'B'},
    'A': {'B', 'D'},
    'B': {'C', 'D'},
    'C': {'D', 'G'},
    'D': {'G'},
}

# Titik awal dan tujuan
start_node = 'S'
goal_node = 'G'

# Panggil fungsi Greedy Search
greedy_search(graph, start_node, goal_node, heuristic)