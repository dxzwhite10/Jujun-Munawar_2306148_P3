# -*- coding: utf-8 -*-
"""A star Search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DNz06vgBwz3acfuSu635tHvBbCh5DaGh
"""

from queue import PriorityQueue

# Fungsi untuk merekonstruksi jalur dari start ke goal
def reconstruct_path(path, start, goal):
    current = goal
    route = [current]
    while current != start:
        current = path[current]
        route.append(current)
    route.reverse()
    return route

# Fungsi untuk algoritma A* Tree Search
def a_star_search(graph, start, goal, heuristic):
    frontier = PriorityQueue()  # Antrian prioritas untuk menyimpan simpul yang akan dieksplorasi
    frontier.put((0, start))  # Menambahkan simpul awal ke dalam antrian dengan prioritas 0
    explored = set()  # Set untuk menyimpan simpul yang sudah dieksplorasi
    path = {}  # Dictionary untuk menyimpan jalur
    g_cost = {start: 0}  # Menyimpan biaya dari start ke setiap node

    while not frontier.empty():
        cost_so_far, current_node = frontier.get()  # Mengambil simpul dengan nilai prioritas terendah dari antrian

        if current_node == goal:
            print("Simpul tujuan sudah ditemukan!")
            route = reconstruct_path(path, start, goal)
            print("Jalur terpendek:", " -> ".join(route))
            print("Total Biaya:", g_cost[goal])
            return True  # Mengembalikan True jika simpul tujuan ditemukan

        explored.add(current_node)  # Tandai simpul sebagai telah dieksplorasi

        for neighbor, cost in graph.get(current_node, {}).items():
            new_g_cost = g_cost[current_node] + cost  # Biaya g(n) = biaya sejauh ini
            total_cost = new_g_cost + heuristic[neighbor]  # f(n) = g(n) + h(n)

            if neighbor not in g_cost or new_g_cost < g_cost[neighbor]:
                frontier.put((total_cost, neighbor))  # Tambahkan ke antrian prioritas
                path[neighbor] = current_node  # Simpan jalur yang diambil
                g_cost[neighbor] = new_g_cost  # Perbarui biaya jalur sejauh ini

    print("Simpul tujuan tidak ditemukan!")
    return False  # Jika tidak menemukan tujuan

# Daftar heuristik untuk setiap simpul
heuristic = {
    'S': 6,
    'A': 4,
    'B': 3,
    'C': 3,
    'D': 1,
    'G': 0
}

# Graf berbobot (dalam bentuk adjacency list)
graph = {
    'S': {'A': 3, 'B': 2},
    'A': {'D': 5, 'B': 1},
    'B': {'C': 2, 'D': 3},
    'C': {'G': 4, 'D': 3},
    'D': {'G': 1},
}

# Titik awal dan tujuan
start_node = 'S'
goal_node = 'G'

# Panggil fungsi a_star_search
a_star_search(graph, start_node, goal_node, heuristic)